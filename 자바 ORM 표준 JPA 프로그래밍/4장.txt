- JPA에서 엔티티와 테이블을 정확히 매핑하는 것이 중요하다

1. @Entity : 테이블과 매핑할 클래스 지정
   - 기본 값으로 클래스 명 적용
   - 기본 생성자 필수 
   - final, enum, interface, inner 클래스에 사용할 수 없음
   - 저장할 필드에 final 사용할 수 없음
2. @Table : 엔티티와 매핑할 테이블 지정
   - 속성 정보
     name : 매핑할 테이블 명
     catalog : catalog 기능이 있는 DB에서 매핑
     schema : schema 기능이 있는 DB에서 매핑
     uniqueConstraints : DDL 생성 시에 유니크 제약 조건 생성 (중복을 허용하지 않음)
                         uniqueConstraints={@UniqueConstraint(name="${uniqueName}", columnNames={"${columnName}", "${columnName}"})}
3. DB 스키마 자동 생성 : JPA는 데이터베이스 방언을 사용해서 DB 스키마 생성 
   * 방언 ? DB에서 제공하는 SQL 문법과 함수가 다른데 이러한 특정 데이터 베이스만의 고유 기능을 방언이라 한다 ex) MySQL : varchar / oracle : varchar2
   * persistentce.xml 에 속성 추가하면 애플리케이션 실행 시점에 DB 테이블을 자동으로 생성
     <property name="hibernate.hbm2ddl.auto" value="create"/>
     create : 기존 테이블 삭제 후 새로 생성
     create-drop : create 속성에 추가로 애플리케이션ㅇ 종료 할 때 생성한 DDL 제거
     update : DB 테이블과 엔티티 매핑정보를 비교해서 변경사항만 수정
     validate : DB 테이블과 엔티티 매핑정보를 비교 후 차이가 있으면 경고 후 애플리케이션 실행하지 않음
     none : 자동 생성 기능을 사용하지 않을 경우 유효하지 않은 옵션 값 세팅
4. 기본 키 매핑
   1. 직접 할당
      - 직접할당 : em.persist() 를 호출하기 전에 애플리케이션에서 직접 식별자 값을 할당
        * 식별자 : 기본키
   2. 자동 생성
      * persistentce.xml 에 키 생성 전략 사용 속성 추가
        <property name="hibernate.id.new_generator_mapppings" value="true"/>
      - IDENTITY : 기본키 생성을 데이터베이스에 위임
        @GeneratedValue(strategy=GenerationType.IDENTITY)
        (데이터 베이스에 엔티티를 저장해서 식별자 값을 획득한 후 영속성 컨텍스트에 저장)
      - SEQUENCE : 데이터베이스 시퀀스를 사용해서 기본키 할당
        클래스 추가 정보 : @SequenceGenerator(name="${식별자생성기명}", sequenceName="${매핑할DB시퀀스명}", initialValue=${시작할 수}, allocaionSize=${증가 수})
        매핑 정보 : @GeneratedValue(strategy=GenerationType.SEQUENCE, generator="${SequenceGenerator.name}")
        (데이터 베이스 시퀀스에서 식별자 값을 획득한 후 영속성 컨텍스트에 저장)
      - TABLE : 키 생성 테이블 사용
        클래스 추가 정보 : @TableGenerator(name="${식별자생성기명}", table="${키생성 테이블명}", pkColumnName="${시퀀스 컬럼명}", valueColumnName="${시퀀스 값 컬럼명}", initalValue="${초기 값}", allocationSize="${증가수}", catalog,schema="${DB catalog,schema 명}", uniqueXonstraints="${유니크 제약 조건}")
        pkColumnName : 시퀀스 이름 / valueColumnName : 시퀀스 값 (실제 증가되는 시퀀스)
        매핑 정보 : @GeneratedValue(strategy=GenerationType.TABLE, generator="${TableGenerator.name}")
        (데이터베이스 시퀀스 생성용 테이블에서 식별자 값을 획득한 후 영속성 컨텍스트에 저장)
      - AUTO : 데이터베이스 방언에 따라 IDENTITY, SEQUENCE, TABLE 전략 중 하나를 자동으로 선택한다.
5. 필드와 컬럼 매핑
   1. @Column : 컬럼 매핑
      - 속성
        @Column (name="${컬럼명}", nullable=false, legnth=10) : ${컬럼명} 컬럼의 널을 허용하지 않고 길이는 10자로 제한함
        그 외 
        - insertable : 엔티티 저상시 이 필드도 같이 저장 (default : true)
          updqteable : 엔티티 수정 시 이필드도 같이 수정 (default : true)
          table : 하나의 엔티티를 두개 이상의 테이블에 매핑할 때 사용
          unique : @Table 의 uniqueConstraints와 같음, 두 컬럼 이상을 사용해서 유니크 제약조건을 사용하려면 클래스 레벨에서 사용해야한다.
          columnDefinition : 데이터베이스 벌럼 정보를 직접 줄 수 있다 ex) columnDefinition="varchar(100) default 'EMPTY"
          precision, scale : 소수점을 포함한 자리 수와 / 소수 자리 수 ( BigDecimal 타입에서 사용한다 )
   2. @Enumerated : 자바 enum 타입을 맵핑
      - 속성
        @Enumerated (EnumType.${TYPE})
        EnumType.ORDINAL : enum 순서를 데이터베이스에 저장
        EnumType.STRING : enum 이름을 데이터 베이스에 저장
   3. @Temporal : 날짜 타입(java.util.Date, java.util.Calendar)을 매핑
      - 속성
        @Temporal (TemporalType.${TYPE})
        TemporalType.DATE : yyyy-mm-dd
        TemporalType.TIME : hh:mm:ss
        TemporalType.TIMESTAMP : yyyy-mm-dd hh:mm:ss
   4. @Lob : 매핑 필드 타입에 따라 자동으로 매핑된다
      @Lob
      private String lobString; => lobString clob
      private byte[] lobByte; => lobByte blob
   5. @Transient : 매핑하지 않는 필드에 선언 (데이터베이스에 저장 또는 조회하지 않고 임시로 객체에 어떤 값을 보관하고 싶을 때 사용)
   6. @Access : 데이터베이스에 엔티티에 값이 저장될 때 필드(AccessType.FIELD)의 값을 직접 접근해서 사용할 것인가 아니면 메서드에 직접(AccessType.PROPERTY) 접근할 것 인가를 설정

* 질문
1. private Integer age 에서 Integer가 아닌 int로 생성하면 안되나요? 무슨 차이가 있는 걸까요?
   int도 사용할 수 있다. (@Column 생략 여부로 null 허용 유무)
   자바 기본 타입(int, double 등)에서는 null이 입력이 되지 않기 때문에 객체타입을 이용하여 null 이 허용 될 수 있도록 한다.
   - 확인 필요       자바 내부에서 값을 바뀌지 않도록 wrapper class인 integer를 사용한다.
2. 생성되는 테이블 컬럼이 알파벳 순으로 생성이 된다. java 객체와 같이 원하는 형태로 컬럼순서를 지정하는 방법은 없나요?
   하이버네이트의 DDL 생성 부분을 코드 레벨에서 수정하여 적용할 수 있으나 권장하지 않는다.
   사례 ) https://medium.com/chequer/jpa-hibernate-hbm2ddl-%EC%BB%AC%EB%9F%BC-%EC%88%9C%EC%84%9C-%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0-e0c4421a8d32
3. length에서 @Column(length = 400) 으로 생성하면 400이 DB의 400자리(char)인가요? 400byte인가요?
   문자 길이를 의미하므로 400자를 입력 할 수 있다 => varchar(400 char) char가 없을 경우 byte 적용
4. @Column 생략하는 케이스를 int 타입에 대해 설명하고 있는데, boolean 타입에 대해서도 설명해주세요.
   https://m.blog.naver.com/yjhyjh5369/221997271213 -> null 허용 DB에는 0|1 이 저장된다.